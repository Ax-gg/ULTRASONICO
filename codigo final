/*
   -- New project --
   
   This source code of graphical user interface 
   has been generated automatically by RemoteXY editor.
   To compile this code using RemoteXY library 3.1.13 or later version 
   download by link http://remotexy.com/en/library/
   To connect using RemoteXY mobile app by link http://remotexy.com/en/download/                   
     - for ANDROID 4.13.13 or later version;
     - for iOS 1.10.3 or later version;

   This source code is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.    
*/

//////////////////////////////////////////////
//        RemoteXY include library          //
//////////////////////////////////////////////

#define REMOTEXY_MODE__SOFTSERIAL

#include <SoftwareSerial.h>
#include <RemoteXY.h>

// RemoteXY connection settings 
#define REMOTEXY_SERIAL_RX 9
#define REMOTEXY_SERIAL_TX 8  
#define REMOTEXY_SERIAL_SPEED 9600

// RemoteXY GUI configuration  
#pragma pack(push, 1)  
uint8_t RemoteXY_CONF[] = { 255,3,0,0,0,53,0,17,0,0,0,31,1,106,200,1,1,3,0,5,
  20,52,60,60,21,2,26,31,10,41,145,24,24,48,6,26,31,79,78,0,31,79,70,70,0,129,
  23,173,56,12,6,65,117,116,111,110,111,109,111,0 };
  
struct {
  int8_t joystick_01_x; 
  int8_t joystick_01_y; 
  uint8_t pushSwitch_01;
  uint8_t connect_flag;
} RemoteXY;   
#pragma pack(pop)

//////////////////////////////////////////////
//           END RemoteXY include           //
//////////////////////////////////////////////

// Pines para motores y sensor ultrasónico
#define PIN_MOTOR_RIGHT_UP 4
#define PIN_MOTOR_RIGHT_DN 5
#define PIN_MOTOR_LEFT_UP 6
#define PIN_MOTOR_LEFT_DN 7
#define PIN_LED 13
#define trigPin 2
#define echoPin 3

// Variables de control
int apagaTeleop = 0;

// Inicialización de los pines y sensor ultrasónico
void setup() {
  pinMode(PIN_MOTOR_RIGHT_UP, OUTPUT);
  pinMode(PIN_MOTOR_RIGHT_DN, OUTPUT);
  pinMode(PIN_MOTOR_LEFT_UP, OUTPUT);
  pinMode(PIN_MOTOR_LEFT_DN, OUTPUT);
  pinMode(PIN_LED, OUTPUT);
  
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  
  Serial.begin(9600);
  RemoteXY_Init();
}

// Función para medir la distancia usando el sensor ultrasónico
int medirDistancia() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  int duracion = pulseIn(echoPin, HIGH);
  int distancia = duracion * 0.034 / 2;  
  return distancia;
}

// Funciones de movimiento del carrito
void avanzar() {
  digitalWrite(PIN_MOTOR_RIGHT_UP, LOW);
  digitalWrite(PIN_MOTOR_RIGHT_DN, HIGH);
  digitalWrite(PIN_MOTOR_LEFT_UP, LOW);
  digitalWrite(PIN_MOTOR_LEFT_DN, HIGH);
}

void retroceder() {
  digitalWrite(PIN_MOTOR_RIGHT_UP, HIGH);
  digitalWrite(PIN_MOTOR_RIGHT_DN, LOW);
  digitalWrite(PIN_MOTOR_LEFT_UP, HIGH);
  digitalWrite(PIN_MOTOR_LEFT_DN, LOW);
}

void girarDerecha() {
  digitalWrite(PIN_MOTOR_RIGHT_UP, HIGH);
  digitalWrite(PIN_MOTOR_RIGHT_DN, LOW);
  digitalWrite(PIN_MOTOR_LEFT_UP, LOW);
  digitalWrite(PIN_MOTOR_LEFT_DN, HIGH);
}

void girarIzquierda() {
  digitalWrite(PIN_MOTOR_RIGHT_UP, LOW);
  digitalWrite(PIN_MOTOR_RIGHT_DN, HIGH);
  digitalWrite(PIN_MOTOR_LEFT_UP, HIGH);
  digitalWrite(PIN_MOTOR_LEFT_DN, LOW);
}

// Función para controlar los motores manualmente con el joystick
void Wheel(int joystick_x, int joystick_y) {
  if (joystick_x > 100) joystick_x = 100;
  if (joystick_x < -100) joystick_x = -100;
  
  if (joystick_y > 100) joystick_y = 100;
  if (joystick_y < -100) joystick_y = -100;
  
  digitalWrite(PIN_MOTOR_RIGHT_UP, joystick_y > 0 ? LOW : HIGH);
  digitalWrite(PIN_MOTOR_RIGHT_DN, joystick_y > 0 ? HIGH : LOW);
  
  digitalWrite(PIN_MOTOR_LEFT_UP, joystick_y > 0 ? LOW : HIGH);
  digitalWrite(PIN_MOTOR_LEFT_DN, joystick_y > 0 ? HIGH : LOW);
}

void loop() {
  RemoteXY_Handler(); // Actualiza la interfaz de RemoteXY

  if (RemoteXY.pushSwitch_01 == 1) { // Modo autónomo
    digitalWrite(PIN_LED, HIGH);
    
    if (apagaTeleop) { 
      apagaTeleop = 0;
      RemoteXY.joystick_01_x = 0;
      RemoteXY.joystick_01_y = 0;
    }

    int distancia = medirDistancia();
    
    if (distancia > 0 && distancia < 5) {
      retroceder();
      delay(500);
      girarDerecha();
      delay(300);
    } else {
      avanzar();
    }
    
  } else { // Modo teleoperado
    apagaTeleop = 1;
    
    digitalWrite(PIN_LED, HIGH);
    delay(100);
    digitalWrite(PIN_LED, LOW);
    delay(100);

    // Control manual con joystick
    Wheel(RemoteXY.joystick_01_x, RemoteXY.joystick_01_y);
  }
}
